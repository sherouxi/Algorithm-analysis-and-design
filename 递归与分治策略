1.众数问题：给定含有n个元素的多重集合S，每个元素在S中出现的次数称为该元素的重数。多重集S中重数最大的元素称为众数。
对于给定的由n个自然数组成的多重集S，计算S的众数及其重数。
2.整数因子分解问题：对于给定的正整数n，计算n共有多少种不同的分解式。
1.众数问题：
public class fenzhi1 {
	static int num=0;//众数
	static int sun=0;//重数
	static int digui(int n[], int a, int b){
		int x =  n[(a+b)/2];
		int jishu=0;
		for(int i=a;i<b;i++){
			if(n[i]==x){
			jishu++;
			}
		}
		return jishu;
	}
	static int find(int n[], int a, int b){
		int x =0;
		for(int i=a;i<b;i++){
			if(n[i]==n[(a+b)/2]){
				x=i;
				break;
			}
		}
		return x;
	}
	static void oys(int n[], int a, int b){
		int num1=(a+b)/2;
		int sun1=digui(n,a,b);
		int left=find(n,a,b);
		if(sun1>sun){
			sun=sun1;
			num=n[num1];
		}
		if(b-(left+sun1)>sun){
			oys(n,left+sun1,b);
		}
		if(left>sun){
			oys(n, 0, left);
		}
	}

	
	
	
	
	
	/**
	 * @param args
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub
	    int a[]={1,1,2,2,3,3,3,3,4};
	    oys(a,0,8);
System.out.println(num);
System.out.println(sun);
	}

}
2.棋盘覆盖问题：
public class sss {

	   /**
     * @param tr表示棋盘左上角行号
     * @param tc表示棋盘左上角列号
     * @param dr表示特殊棋盘的行号
     * @param dc表示特殊棋盘的列号
     * @param SIZE =2^k。棋盘的规格为2^k*2^k
     * */
    public static void ChessBoard(int tr, int tc, int dr, int dc, int size) {
        if (size == 1) {
            return;
        }
        int t = title++; // t表示L型骨牌的编号
        int s = size / 2; // 分割棋盘
 
        // 覆盖左上角棋盘
        if (dr < tr + s && dc < tc + s) {
            // 说明特殊方格在此小棋盘中
            ChessBoard(tr, tc, dr, dc, s);
        } else {
            // 说明特殊方格不在此小棋盘中
            // 用t号L型棋盘覆盖这个小棋盘的右下角
            board[tr + s - 1][tc + s - 1] = t;
            // 覆盖其余棋盘
            ChessBoard(tr, tc, tr + s - 1, tc + s - 1, s);
        }
 
        // 覆盖右上角棋盘
        if (dr < tr + s && dc >= tc + s) {
            ChessBoard(tr, tc + s, dr, dc, s);
        } else {
            board[tr + s - 1][tc + s] = t;
            ChessBoard(tr, tc + s, tr + s - 1, tc + s, s);
        }
        // 覆盖左下角棋盘
        if (dr >= tr + s && dc < tc + s) {
            ChessBoard(tr + s, tc, dr, dc, s);
        } else {
            board[tr + s][tc + s - 1] = t;
            ChessBoard(tr + s, tc, tr + s, tc + s - 1, s);
        }
        // 覆盖右下角棋盘
        if (dr >= tr + s && dc >= tc + s) {
            ChessBoard(tr + s, tc + s, dr, dc, s);
        } else {
            board[tr + s][tc + s] = t;
            ChessBoard(tr + s, tc + s, tr + s, tc + s, s);
        }
 
    }
 
    public static void main(String[] args) {
        // 假设特殊方格的位置为第三行第三列
        board[2][2] = 0;
        ChessBoard(0, 0, 2, 2, SIZE);
 
        for (int i = 0; i < SIZE; ++i) {
            for (int j = 0; j < SIZE; j++) {
                System.out.print(board[i][j] + "  ");
            }
            System.out.println();
        }
    }
 
    static final int SIZE = 4;
    static int[][] board = new int[SIZE][SIZE];
    static int title = 1; // title表示L型骨牌的编号
}
  
